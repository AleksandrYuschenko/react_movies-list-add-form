{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/Validation/validation.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","pattern","isValid","value","test","TextField","name","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","errorMessage","includes","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","disabled","onClick","preventDefault","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c8a650a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const isValid = (value: string) => pattern.test(value);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { isValid } from '../Validation/validation';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => { },\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  let hasError = touched && required && !value;\n\n  // eslint-disable-next-line max-len\n  let errorMessage = `${label} is required`;\n\n  if (id.includes('imgUrl') || id.includes('imdbUrl')) {\n    hasError = touched && required && (!value || !isValid(value));\n  }\n\n  if ((value && !isValid(value))) {\n    errorMessage = `${label} is not valid`;\n  }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value);\n          }}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\nimport { isValid } from '../Validation/validation';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  // eslint-disable-next-line max-len\n\n  const movie = () => ({\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  });\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            id=\"submit\"\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={\n              !isValid(imgUrl)\n              || !isValid(imdbUrl)\n              || title === ''\n              || imgUrl === ''\n              || imdbUrl === ''\n              || imdbId === ''\n            }\n            onClick={(event) => {\n              event.preventDefault();\n              if (isValid(imgUrl) || isValid(imdbUrl)) {\n                onAdd(movie());\n                setCount(count + 1);\n                setTitle('');\n                setDescription('');\n                setImgUrl('');\n                setImdbUrl('');\n                setImdbId('');\n              }\n            }}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const onAdd = (movie: Movie) => {\n    setMovies((prevMovies) => [...prevMovies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={onAdd}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}